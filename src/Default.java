
//public class Default {
//package 패키지명;
//import 풀패키지명;
/*	접근지정자[그외지정자] class 클래스명 
	

	멤버변수 접근지정자[그외지정자]

	데이터타입 변수명;
	클래스 변수 접근지정자 static[]

	생성지
	 접근지정자

	클래스명 ([매개변수 선언])

	 멤버메서드
	접근지정자[그외지정자]

	리턴타입 메서드명 ([매개변수 선언]) {
 지역변수 선언
	 데이터 타입, 변수명;
	 
	 사용할 클래스의 객체만드는 공식. 지역변수 선언과 동일
	 사용할 클래스명 참조변수명(변수) =  new 생성자 ();
	 만든 객체의 멤버를 사용
	 멤버 변수에 값을 저장
	 *참조변수명.멤버변수명 =값
	 //멤버변수의 값을 불러오고싶을때
	 *멤버변수와 같은 데이터타입 변수명 = 참조변수명.멤버변수명
	 *멤버 메서드 리턴이 없고 매개변수도 없는 경우
	 *참조변수명.메서드명()
	 *멤버메서드 리턴이 없고 매개변수도 있는 경우
	 *참조변수명. 메서드명(매개변수와 같은 데이터 타입의 데이터)
	 멤버메서드 리턴이 있고 매개변수가 없는 경우
	 리턴데이터 타입과같은데이터 타입의 변수명=참조변수명.메서드명()
	 멤버메서드 리턴이 있고 매개변수도 있는경우
	리턴데이터타입과 같은 데이터 타입의 변수명
	
	클래스 변수 사용
	클래스명. 변수명
	클래스메서ㄱ드 사용
	
	
	 
	 
 }
	클래스 메서드
	접근지정자
	
	pulic - 어디서든 사용이 가능
	 protecrtwed - 같은 패키지 에서만 사용이 가가능  단 상속관계에서는 접근이 가능
	 default - 가은 패키지 내에서만 사용이 가능하다.
	 private - 같은 클래스 내에서만 사용이 가능하다.
	 
	 그외 지정자
	 abstract 
	 class 선언부 : 클래스를 상속해서 사용
	 메서드 선언부 : 상속해서 오버라이딩 사용
	  static
	  - 메서드 선언부 : 클래스 메서드
	  - 멤버변수 선언부 : 클래스 변수
	  
	  final 
	  - cLass 선언부  : 이 클래스를 상속하지 마라
	  - 메서드 선언부 : 오버라이딩 불가
	  - 변수 선언부 : 상수로 사용(값변경 불가)
	  
	 
	 
	 

	static 리턴타입 메서드면 ([매개변수 선언] 
		
	) {}
	
}
*/